// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios8.3-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name YCSwiftSignatureView
import Swift
import UIKit
@_exported import YCSwiftSignatureView
public protocol SwiftSignatureViewDelegate : AnyObject {
  func swiftSignatureViewDidTapInside(_ view: YCSwiftSignatureView.SwiftSignatureView)
  func swiftSignatureViewDidPanInside(_ view: YCSwiftSignatureView.SwiftSignatureView, _ pan: UIKit.UIPanGestureRecognizer)
}
@objc @_inheritsConvenienceInitializers open class SwiftSignatureView : UIKit.UIView, UIKit.UIGestureRecognizerDelegate {
  weak open var delegate: YCSwiftSignatureView.SwiftSignatureViewDelegate?
  @objc @IBInspectable open var maximumStrokeWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var minimumStrokeWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var strokeColor: UIKit.UIColor
  @objc @IBInspectable open var strokeAlpha: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  open var signature: UIKit.UIImage? {
    get
    set
  }
  open func clear()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  public func getCroppedSignature() -> UIKit.UIImage?
  @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @objc public func pan(_ pan: UIKit.UIPanGestureRecognizer)
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  @objc deinit
}
